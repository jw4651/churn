# Interactive graph

<style>
  * {
    font-family: sans-serif;
  }
</style> 

<div id="plot">
</div>

<script src="https://cdn.jsdelivr.net/npm/d3@7"></script>
<script src="scripts/myscript.js"></script>
```{r}
options(repos = c(CRAN = "https://cloud.r-project.org"))
install.packages("plotly")

library(ggplot2)
library(plotly)
library(forcats)
library(dplyr)

merged_data <- readRDS("merged_data.rds")
cleaned_data <- merged_data %>%
  mutate(across(where(is.numeric), ~ ifelse(is.na(.), median(., na.rm = TRUE), .))) %>%
  filter(!is.na(`Churn Category`))

plot_ly(
  cleaned_data,
  x = ~`Churn Category`,
  type = "histogram",
  marker = list(color = "steelblue", line = list(color = "black", width = 1))
) %>%
  layout(
    title = "Distribution of Churn Categories",
    xaxis = list(title = "Churn Category"),
    yaxis = list(title = "Count")
  )

```

```{r}
plot_ly(
  cleaned_data,
  x = ~`Churn Category`,
  type = "histogram",
  marker = list(color = "steelblue", line = list(color = "black", width = 1))
) %>%
  layout(
    title = "Distribution of Churn Reasons",
    xaxis = list(title = "Churn Reason", tickangle = 65),
    yaxis = list(title = "Count")
  )

```

```{r}
# Load required libraries
library(plotly)
library(dplyr)

# Ensure the dataset is cleaned
cleaned_data <- cleaned_data %>%
  filter(!is.na(`Internet Type`) & `Internet Type` != "") %>%
  filter(!is.na(`Churn Category`) & `Churn Category` != "")

# Calculate the proportion of each Churn Category within each Internet Type
proportion_data <- cleaned_data %>%
  group_by(`Internet Type`, `Churn Category`) %>%
  summarise(Count = n(), .groups = "drop") %>%
  group_by(`Internet Type`) %>%
  mutate(Proportion = Count / sum(Count))

# Create the interactive plot using plot_ly
plot_ly(
  proportion_data,
  x = ~`Internet Type`,
  y = ~Proportion,
  color = ~`Churn Category`,
  type = "bar"
) %>%
  layout(
    title = "Internet Type vs Churn",
    xaxis = list(title = "Internet Type"),
    yaxis = list(title = "Proportion"),
    barmode = "stack"
  )

```

```{r}
# Load required libraries
library(plotly)
library(dplyr)

# Ensure the dataset is cleaned
cleaned_data <- cleaned_data %>%
  filter(!is.na(`Contract.y`) & `Contract.y` != "") %>%
  filter(!is.na(`Churn Category`) & `Churn Category` != "")

# Calculate the proportion of each Churn Category within each Contract Type
proportion_data <- cleaned_data %>%
  group_by(`Contract.y`, `Churn Category`) %>%
  summarise(Count = n(), .groups = "drop") %>%
  group_by(`Contract.y`) %>%
  mutate(Proportion = Count / sum(Count))

# Create the interactive plot using plot_ly
plot_ly(
  proportion_data,
  x = ~`Contract.y`,
  y = ~Proportion,
  color = ~`Churn Category`,
  type = "bar"
) %>%
  layout(
    title = "Contract Type vs Churn",
    xaxis = list(title = "Contract Type"),
    yaxis = list(title = "Proportion"),
    barmode = "stack"
  )


```

```{r}
# Load required libraries
library(plotly)
library(dplyr)

# Ensure the dataset is cleaned
cleaned_data <- cleaned_data %>%
  filter(!is.na(`Avg Monthly GB Download`) & !is.na(`Churn Category`)) %>%
  filter(!is.na(`Monthly Charge`) & !is.na(`Churn Category`))

# 1. Interactive Avg Monthly GB Download vs Churn
densities_gb <- cleaned_data %>%
  group_by(`Churn Category`) %>%
  do(data.frame(
    density = density(.$`Avg Monthly GB Download`, na.rm = TRUE)$y,
    download = density(.$`Avg Monthly GB Download`, na.rm = TRUE)$x
  ))

plot1 <- plot_ly() %>%
  add_lines(
    data = densities_gb,
    x = ~download,
    y = ~density,
    color = ~`Churn Category`,
    name = ~`Churn Category`,
    line = list(width = 2)
  ) %>%
  layout(
    title = "Avg Monthly GB Download vs Churn",
    xaxis = list(title = "Avg Monthly GB Download"),
    yaxis = list(title = "Density"),
    hovermode = "x unified"
  )

# 2. Interactive Monthly Charge vs Churn
densities_charge <- cleaned_data %>%
  group_by(`Churn Category`) %>%
  do(data.frame(
    density = density(.$`Monthly Charge`, na.rm = TRUE)$y,
    charge = density(.$`Monthly Charge`, na.rm = TRUE)$x
  ))

plot2 <- plot_ly() %>%
  add_lines(
    data = densities_charge,
    x = ~charge,
    y = ~density,
    color = ~`Churn Category`,
    name = ~`Churn Category`,
    line = list(width = 2)
  ) %>%
  layout(
    title = "Monthly Charge vs Churn",
    xaxis = list(title = "Monthly Charge"),
    yaxis = list(title = "Density"),
    hovermode = "x unified"
  )

# Display both plots
plot1
plot2

```

